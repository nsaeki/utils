#! /usr/bin/env ruby
# cp932のファイル名でzip/unzipする
#
# Usage:
#   zip:  cp932zip dir(or file)
#   unzip: cp932zip -u file.zip

require 'zip'
require 'optparse'
require 'fileutils'
require 'securerandom'

def create_zip(zip_filename, dir, options = {})
  if File.exist?(zip_filename)
    fail "File #{zip_filename} already exists."
  end

  files = File.directory?(dir) ? Dir.glob("#{dir}/**/*") : [dir]
  if options[:password]
    enc = Zip::TraditionalEncrypter.new(options[:password])
  end

  io = StringIO.new
  io.set_encoding('cp932')
  buf = Zip::OutputStream.write_buffer(io, enc) do |out|
    files.each do |f|
      puts f
      out.put_next_entry(f.encode('cp932'))
      out.write(File.read(f))
    end
  end

  File.open(zip_filename, 'w') { |f| f.write(buf.string) }
end

def unzip(zip_filename)
  Zip::File.open(zip_filename) do |zip|
    zip.each do |entry|
      name = entry.name.force_encoding('cp932').encode('utf-8')
      puts name
      File.unlink(name) if File.file?(name)
      FileUtils.mkdir_p(File.dirname(name)) unless Dir.exist?(File.dirname(name))
      entry.extract(name)
    end
  end
end

opts = ARGV.getopts('dpu')
if opts['u'] || opts['d']
  unzip(ARGV[1])
else
  if opts['p']
    password = SecureRandom.base64(15)
    puts "Password: #{password}"
  end
  zip_filename = File.basename(ARGV[0]).sub!(/\.[^.]*$/, '.zip')
  create_zip(zip_filename, ARGV[0], {password: password})
end
